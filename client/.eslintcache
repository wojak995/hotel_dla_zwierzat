[{"/home/pawel/projekty/projekt/client/src/index.js":"1","/home/pawel/projekty/projekt/client/src/App.js":"2","/home/pawel/projekty/projekt/client/src/pages/Home.js":"3","/home/pawel/projekty/projekt/client/src/pages/Rezerwacje.js":"4","/home/pawel/projekty/projekt/client/src/pages/Error.js":"5","/home/pawel/projekty/projekt/client/src/pages/Rejestracja.js":"6","/home/pawel/projekty/projekt/client/src/pages/Login.js":"7","/home/pawel/projekty/projekt/client/src/components/Navbar.js":"8","/home/pawel/projekty/projekt/client/src/components/Camera.js":"9","/home/pawel/projekty/projekt/client/src/pages/Test.js":"10","/home/pawel/projekty/projekt/client/src/components/CreateRoom.js":"11","/home/pawel/projekty/projekt/client/src/pages/Test2.js":"12","/home/pawel/projekty/projekt/client/src/context/UserContext.js":"13","/home/pawel/projekty/projekt/client/src/components/OnlyUserRoute.js":"14","/home/pawel/projekty/projekt/client/src/components/OnlyAdminRoute.js":"15","/home/pawel/projekty/projekt/client/src/pages/Administration.js":"16","/home/pawel/projekty/projekt/client/src/pages/UserPanel.js":"17","/home/pawel/projekty/projekt/client/src/components/newCamera.js":"18","/home/pawel/projekty/projekt/client/src/pages/Monitoring.js":"19"},{"size":340,"mtime":1610803642864,"results":"20","hashOfConfig":"21"},{"size":2124,"mtime":1611565909201,"results":"22","hashOfConfig":"21"},{"size":5069,"mtime":1611595383506,"results":"23","hashOfConfig":"21"},{"size":7280,"mtime":1611524787297,"results":"24","hashOfConfig":"21"},{"size":147,"mtime":1607963371957,"results":"25","hashOfConfig":"21"},{"size":4988,"mtime":1611563888546,"results":"26","hashOfConfig":"21"},{"size":4859,"mtime":1611595419671,"results":"27","hashOfConfig":"21"},{"size":2967,"mtime":1611507042191,"results":"28","hashOfConfig":"21"},{"size":1920,"mtime":1610253886624,"results":"29","hashOfConfig":"21"},{"size":2907,"mtime":1611550746553,"results":"30","hashOfConfig":"21"},{"size":583,"mtime":1610382658500,"results":"31","hashOfConfig":"21"},{"size":2670,"mtime":1611564824789,"results":"32","hashOfConfig":"21"},{"size":4520,"mtime":1611564408772,"results":"33","hashOfConfig":"21"},{"size":407,"mtime":1611506187748,"results":"34","hashOfConfig":"21"},{"size":390,"mtime":1611504130410,"results":"35","hashOfConfig":"21"},{"size":14828,"mtime":1611559752301,"results":"36","hashOfConfig":"21"},{"size":8229,"mtime":1611567146008,"results":"37","hashOfConfig":"21"},{"size":3127,"mtime":1611262177529,"results":"38","hashOfConfig":"21"},{"size":5758,"mtime":1611354693974,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"upzczf",{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"42"},"/home/pawel/projekty/projekt/client/src/index.js",[],["90","91"],"/home/pawel/projekty/projekt/client/src/App.js",["92","93","94","95"],"import React, { Fragment } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\n\nimport Home from \"./pages/Home\";\nimport Rezerwacje from \"./pages/Rezerwacje\";\nimport Login from \"./pages/Login\";\nimport Rejestracja from \"./pages/Rejestracja\";\nimport Error from \"./pages/Error\";\nimport Navbar from \"./components/Navbar\"\n//import Camera from \"./components/Camera\"\nimport Test from \"./pages/Test\";\nimport Test2 from \"./pages/Test2\";\nimport Administration from \"./pages/Administration\"\nimport UserPanel from \"./pages/UserPanel\"\n\nimport CreateRoom from \"./components/CreateRoom\";\nimport { UserProvider} from './context/UserContext.js';\nimport OnlyUserRoute from './components/OnlyUserRoute';\nimport OnlyAdminRoute from './components/OnlyAdminRoute';\n//import Room from \"./pages/Test\";\nimport Cam from './components/newCamera'\nimport Monitoring from './pages/Monitoring'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function App() {\n  return (\n    <Fragment>\n      <Router>\n      <UserProvider>\n        <Navbar/>\n        <Switch> \n          <Route exact path=\"/\" component={Home}/>\n          <OnlyUserRoute path=\"/rezerwacja/\" component={Rezerwacje}/>\n          <OnlyUserRoute path=\"/userpanel\" component={UserPanel} />\n          <Route path=\"/rejestracja/\" component={Rejestracja}/>\n          <Route path=\"/logowanie/\" component={Login}/>\n          <OnlyAdminRoute path=\"/administrator\" component={Administration}/>\n          <OnlyAdminRoute path=\"/monitoring\" component={Monitoring}/>\n          <Route component={Error} />\n\n        </Switch>\n      </UserProvider>\n      </Router>\n    </Fragment>\n  )\n}\n\n\n/*\n          <Route path=\"/test/:roomID\" component={Test} />\n          <OnlyUserRoute path=\"/test2/:roomID\" component={Test2} />\n          <OnlyAdminRoute path=\"/y\" exact component={CreateRoom}/>\n          <Route path=\"/test\" component={Test}/>\n          <Route path=\"/test2\" component={Test2}/>\n          <Route path=\"/aaa\" component={Cam} />\n          <Route path=\"/test\" component={Test}/>\n          <Route path=\"/test2\" component={Test2}/>\n*/","/home/pawel/projekty/projekt/client/src/pages/Home.js",["96","97","98","99"],"/home/pawel/projekty/projekt/client/src/pages/Rezerwacje.js",["100","101","102","103"],"import React, {useState, useRef, useEffect} from 'react'\nimport {Form, Container, Row, Col, FormGroup, Button, Alert} from 'react-bootstrap'\nimport DatePicker from 'react-datepicker'\nimport Axios from 'axios'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst Rezerwacje = () => {\n    const roomIdRef = useRef();\n    const petNameRef = useRef();\n    const petSpeciesRef = useRef();\n    const [check, setCheck] = useState(false)\n    const [show, setShow] = useState(false)\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(null);\n    const [rooms, setRooms] = useState();\n    const userID = localStorage.getItem('userId')\n\n    let date1=null\n    let date2=null\n\n    function handleDateSubmit(e) {\n        e.preventDefault()\n        setCheck(false)\n        date1 = convertDate(startDate);\n        if(endDate===null){\n            date2 = convertDate(startDate)\n        } else {\n            date2 = convertDate(endDate);\n        }\n        console.log(date1 + \" : \" +date2)\n        \n        Axios.post(\"http://localhost:5001/booking/free\", {\n            firstDay: date1,\n            lastDay: date2\n        }).then((response)=>{\n            setRooms(response.data)\n            setCheck(true)\n            if(response.data.length===0){\n                setShow(false)\n            } else {\n                setShow(true)\n            }\n        }\n        )\n    }\n    function handleSubmit(e) {\n        e.preventDefault()\n        console.log(\"handle submit\")\n        console.log(roomIdRef.current.value)\n        Axios.post(\"http://localhost:5001/animals\", {\n            id_animals: null,\n            name: petNameRef.current.value,\n            species: petSpeciesRef.current.value,\n            description: \"\"\n        }).then((response)=>{\n            console.log(response)\n            checkAnimal()\n        })\n    }\n\n    function checkAnimal() {\n        Axios.post(\"http://localhost:5001/animals/new\", {\n            name: petNameRef.current.value,\n            species: petSpeciesRef.current.value\n        }).then((response)=>{\n            console.log(\"check\")\n            let x = response.data[0].length - 1\n            console.log(response.data[0][x].id_animals)\n\n            addBooking(response.data[0][x].id_animals)\n        })\n    }\n\n    function addBooking(id) {\n        date1 = convertDate(startDate);\n        if(endDate===null){\n            date2 = convertDate(startDate)\n        } else {\n            date2 = convertDate(endDate);\n        }\n        Axios.post(\"http://localhost:5001/booking\", {\n            firstDay: date1,\n            lastDay: date2,\n            idUser: userID,\n            idAnimal: id,\n            IdRoom: roomIdRef.current.value\n        }).then((response)=>{\n            console.log()\n        })\n\n    }\n\n    const convertDate = str => {\n        str = str.toString();\n        let parts = str.split(\" \");\n        let months = {\n            Jan: \"01\",\n            Feb: \"02\",\n            Mar: \"03\",\n            Apr: \"04\",\n            May: \"05\",\n            Jun: \"06\",\n            Jul: \"07\",\n            Aug: \"08\",\n            Sep: \"09\",\n            Oct: \"10\",\n            Nov: \"11\",\n            Dec: \"12\"\n        };\n        return parts[3] + \"-\" + months[parts[1]] + \"-\" + parts[2];\n    };\n\n    const onChange = dates => {\n        const [start, end] = dates;\n        setStartDate(start)\n        setEndDate(end);\n    };\n\n    useEffect(()=>{\n        console.log(userID)\n    })\n \n    return (\n        <>\n        <Container className=\"d-flex align-items-center justify-content-center\"\n        style={{minHeight: \"15vh\" }}>\n            <div className=\"w-100\" style={{maxWidth: \"600px\"}}>\n                <div>\n                <Form onSubmit={handleDateSubmit}>\n                    <Row>\n                    <Col sm={6}>\n                        <FormGroup>\n                        <DatePicker\n                            dateFormat=\"yyyy mm dd\"\n                            selected={startDate}\n                            onChange={onChange}\n                            startDate={startDate}\n                            endDate={endDate}\n                            selectsRange\n                            inline\n                        />\n                        </FormGroup>\n                    </Col>\n\n                    <Col sm={6}>\n                        <Button className=\"w-100\" type=\"submit\" variant=\"outline-secondary\">\n                        Sprawdź termin\n                        </Button>\n                        <Alert show={show&&check} variant=\"success\" style={{top:12}}>\n                            <Alert.Heading>Mamy wolne pokoje!</Alert.Heading>\n                                <p>\n                                Możesz dokonać rejestracji wypełniając poniższe formularze lub kontaktując się z nami.\n                                </p><p>\n                                Pod numerem: 666 777 888, \n                                </p><p>\n                                Lub na: przykladowy@email.com    \n                                </p>\n                        </Alert>\n                        <Alert show={!show&&check} variant=\"danger\" style={{top:12}}>\n                            <Alert.Heading>Terminy zajęte</Alert.Heading>\n                                <p>\n                                Proszę spróbować wybrać inny okres lub skontaktować się z nami:\n                                </p><p>\n                                Pod numerem: 666 777 888, \n                                </p><p>\n                                Lub na: przykladowy@email.com\n                                </p>\n                        </Alert>\n                    </Col>\n                    </Row>\n                </Form>\n                </div>\n                <div>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"chooseRoom\">\n                        <Form.Label>Wybierz pokój</Form.Label>\n                        <Form.Control as=\"select\" ref={roomIdRef} required>\n                            {\n                                    show?rooms.map((item) => {\n                                        const {id, id_rooms, type, idSize, idCamera} = item;\n                                        return (\n                                            <option key={id_rooms}>{id_rooms}</option>\n                                        );\n                                    }):<option>Empty</option>\n                            }\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group id=\"Imię\">\n                        <Form.Label>Imię zwierzęcia:</Form.Label>\n                        <Form.Control type=\"text\" ref={petNameRef} required />\n                    </Form.Group>\n                    <Form.Group id=\"Gatunek\">\n                        <Form.Label>Gatunek zwierzęcia:</Form.Label>\n                        <Form.Control type=\"text\" ref={petSpeciesRef} required />\n                    </Form.Group>\n                    <Button disabled={!show} className=\"w-100\" type=\"submit\">\n                    Zarezerwuj pokój\n                    </Button>\n                </Form>\n                </div>\n            </div>\n        </Container>\n        </>\n    )\n}\n\n\n\nexport default Rezerwacje\n","/home/pawel/projekty/projekt/client/src/pages/Error.js",[],"/home/pawel/projekty/projekt/client/src/pages/Rejestracja.js",[],"/home/pawel/projekty/projekt/client/src/pages/Login.js",[],"/home/pawel/projekty/projekt/client/src/components/Navbar.js",["104","105"],"import React, {useEffect, useState } from 'react'\nimport logo from \"../images/logo.png\";\nimport { FaAlignRight } from \"react-icons/fa\";\nimport {Link, useHistory} from \"react-router-dom\"\nimport {useUser} from '../context/UserContext'\nimport {Button} from 'react-bootstrap'\n\nexport default function Navbar() {\n    const [isError, setIsError] = useState()\n    const {loginSucces, checkAuthentication, logout} = useUser();\n    const history = useHistory()\n    \n    const [isOpen, setIsOpen] = useState(false)\n    const [role, setRole] = useState()\n\n\n    const handleToggle = () => {\n        if(isOpen===false){\n            setIsOpen(true)\n        } else {\n            setIsOpen(false)\n        }\n    }\n\n    async function logoutBtn(){\n        try {\n            await logout();\n            setRole(false)\n            setIsError(false)\n            history.push('/') \n        } catch {\n            setIsError(true)\n            console.log(\"Failed to logout\")\n        }\n        \n        \n    }\n\n    useEffect(()=>{\n        \n        setRole(localStorage.getItem(\"role\"))\n        checkAuthentication(); \n        console.log(\"role \"+role)\n    },[])\n    //render() {\n        return (\n                    <nav className=\"navbar\">\n                        <div className=\"nav-center\">\n                            <div className=\"nav-header\">\n                                <Link to=\"/\">\n                                    <img className=\"nav-logo\" src={logo} alt=\"Pet Hotel\"/>\n                                </Link>\n                                <button type=\"button\" className=\"nav-btn\" onClick={handleToggle}>\n                                    <FaAlignRight className=\"nav-icon\" />\n                                </button>\n                            </div>\n                            <ul className={isOpen?\"nav-links show-nav\":\"nav-links\"}>\n                                <li>\n                                    <Link to=\"/\">Home</Link>\n                                </li>\n                                <li>\n                                    <Link to=\"/rezerwacja\">Rezerwacje</Link>\n                                </li>\n                                <li>\n                                    \n                                    {\n                                        loginSucces&&role?<Link to=\"/administrator\">Administracja</Link>\n                                        :(loginSucces&&!role?<Link to=\"/userpanel\">Moje konto</Link>:<Link to=\"/logowanie\">Zaloguj się</Link>)      \n                                    }\n                                </li>\n                                <li>{loginSucces?<Button variant=\"outline-danger\" onClick={logoutBtn}>Wyloguj się</Button>\n                                :<Link to=\"/rejestracja\">Utwórz konto</Link>\n                                }\n                                </li>\n                            </ul>\n                        </div>\n                    </nav>\n            \n        )\n    //}\n}\n","/home/pawel/projekty/projekt/client/src/components/Camera.js",[],["106","107"],"/home/pawel/projekty/projekt/client/src/pages/Test.js",["108","109","110","111"],"import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\"\n\n\nconst { promisify } = require('util')\nconst sleep = promisify(setTimeout)\n\nconst Test = (props) => {\n    const socket = useRef();\n    const userVideo = useRef();\n    const [yourID, setYourID] = useState(\"\");\n    const [stream, setStream] = useState();\n    const roomID = props.id\n    const [peers, setPeers] = useState([]);\n    const peersRef = useRef([]);\n\n\n    useEffect(() => {\n        socket.current = io('http://localhost:5001')\n\n        const videoSource = roomID;\n        console.log(\"vid: \" + videoSource)\n        navigator.mediaDevices.getUserMedia({\n            audio: false, \n            video: {deviceId: videoSource ? {exact: videoSource} : undefined}\n        }).then(stream => {\n            setStream(stream);\n            if(userVideo.current){\n                userVideo.current.srcObject = stream;\n            }\n            socket.current.emit(\"create room\", roomID);\n            console.log(\"create room\")\n\n\n            socket.current.on(\"all users\", users => {\n                console.log(\"all\")\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socket.current.id, stream);\n                    console.log(userID)\n                    console.log(socket.current.id)\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push(peer);\n                })\n                setPeers(peers);\n            })\n\n        }).catch(console.error)\n\n        socket.current.on(\"yourID\", id => {\n            setYourID(id);   \n        })\n\n        socket.current.on(\"receiving returned signal\", payload => {\n            console.log(\"rec ret sig\")\n            const item = peersRef.current.find(p => p.peerID === payload.id);//szukamy od kogo sygnał\n            item.peer.signal(payload.signal);\n        });\n\n    }, [])\n\n\n\n\n\n    function createPeer(userToSignal, callerID, stream) {\n        console.log(\"createPeer\")\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            console.log(\"sending signal\")\n            socket.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        peer.on(\"close\", () => {\n            console.log('Connection destroyed');\n            peer.destroy()\n        })\n        peer.on('error', err => {\n            console.log(err);\n        });\n        return peer;\n    }\n\n\n    let UserVideo;\n    if (stream) {\n        UserVideo = (\n        <video className=\"videoStyle\" playsInline muted ref={userVideo} autoPlay />\n        );\n    }\n\n    return (\n        <div>\n            {UserVideo}\n        </div>\n    )\n}\nexport default Test\n","/home/pawel/projekty/projekt/client/src/components/CreateRoom.js",[],"/home/pawel/projekty/projekt/client/src/pages/Test2.js",["112","113","114"],"import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\"\n\nconst Video = (props) => {\n    const reff = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            reff.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <div>\n            <video classname=\"videoStyle\" controls autoPlay ref={reff} />\n        </div>\n    );\n}\n\n\nconst Test2 = (props) => {\n    const [stream, setStream] = useState();\n\n    //const roomID = props.match.params.roomID\n    const roomID = props.id\n    const socket = useRef();\n    const [peers, setPeers] = useState([]);\n    const peersRef = useRef([]);\n    useEffect(() => {\n        socket.current = io(\"http://localhost:5001\");\n\n        socket.current.emit(\"join room\", roomID);\n        console.log(\"join room\")\n\n        socket.current.on(\"user joined\", payload => {\n            console.log(\"user joined\")\n            const peer = addPeer(payload.signal, payload.callerID, stream);\n            console.log(\"peer\")\n            console.log(peer)\n            peersRef.current.push({\n                peerID: payload.callerID,\n                peer,\n            })\n            setPeers(users => [...users, peer]);\n        });\n        socket.current.on(\"close peer\", () => {\n            console.log(\"destroy peer\")\n            peersRef.current.destroy(); \n        })\n        console.log(\"peers moj\")\n        console.log(peers)\n    }, [])\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            console.log(\"returning signal\")\n            socket.current.emit(\"returning signal\", { signal, callerID })\n        })\n\n        peer.on(\"close\", () => {\n            console.log('Connection destroyed');\n            peer.destroy()\n        })\n        peer.on('error', err => {\n            console.log(err);\n        });\n\n        peer.signal(incomingSignal);\n        \n        return peer;\n    }\n \n\n    return (\n        <div>\n            {/*Object.keys(users).map(key => {\n                console.log(key)\n                if (key === yourID) {\n                    return null;\n                }\n                return (\n                    <button onClick={() => callPeer(key)}>Call {key}</button>\n                );\n            })          \n        */}\n        {\n            peers.map((peer, index)=> {\n                return (\n                    <Video key={index} peer={peer} />\n                )\n            })\n        }\n\n        </div>\n    )\n}\n\nexport default Test2\n","/home/pawel/projekty/projekt/client/src/context/UserContext.js",["115"],"import React, {useContext, useState} from 'react'\nimport Axios from 'axios'\n\nconst UserContext = React.createContext();\nconst UserUpdateContext = React.createContext();\n\nexport function useUser() {\n    return useContext(UserContext)\n}\n\n\nexport function UserProvider({ children }) {\n    //const [currentUser, setCurrentUser] = useState(\"test\");\n    const [loading, setLoading] = useState(true);\n    const [loading2, setLoading2] = useState(true);\n    //const [isLogged, setIsLogged] = useState(false);\n    const [loginSucces, setLoginSucces] = useState(false)\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [loginCheck, setLoginCheck] = useState();\n\n    function signup(name, surname, username, password) {\n        setLoginCheck(false)\n        Axios.post('http://localhost:5001/user', {\n            //id_users: null,\n            login: username,\n            pswd: password, \n            name: name, \n            surname: surname,\n            admin: 0\n        }).then((response)=>{\n            console.log(response);\n            if(response.data.message){\n                setLoginCheck(true)\n            }\n        })\n    }\n\n    function logout(){\n        setLoginSucces(false)\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"loggedIN\")\n        localStorage.removeItem(\"role\")\n        localStorage.removeItem(\"userId\")\n        setIsAdmin(false)\n        setLoading(false)\n        setLoading2(false)\n    }\n    function loging(username, password) {\n        setLoading(true)\n        setLoading2(true)\n        setLoginCheck(false)\n        console.log(\"logowanie\")\n        Axios.post(\"http://localhost:5001/user/login\", {\n            login: username,\n            pswd: password\n        }).then((response)=>{\n            console.log(\"response\")\n            if (!response.data.auth) {\n                setLoginSucces(false)\n                console.log(response.data.message)\n                setLoading2(false)\n                setLoginCheck(true)\n            } else {\n                localStorage.setItem(\"token\", response.data.token) //zalecany sposob do przechowywania tokenow\n                console.log(response.data.user[0].login)\n                checkAuthentication()\n                setLoginSucces(true)\n                setLoading2(false)\n            }\n        })\n\n    }\n    \n    function checkAuthentication(){\n        setLoading(true)\n\n        Axios.get(\"http://localhost:5001/user/isAuthenticated\", {\n            headers: {\n                \"x-access-token\": localStorage.getItem(\"token\"), \n            }\n        }).then((response)=>{\n            console.log(response)\n            console.log(\"Check auth:\"+response.data.auth)\n            localStorage.setItem(\"userId\", response.data.id)\n            setLoginSucces(response.data.auth)\n            if(response.data.auth){\n                userRole(response.data.id)\n            }\n        })\n        \n    }\n\n    function userRole(id){\n        Axios.get(\"http://localhost:5001/user/\"+id).then((response)=>{\n            console.log(\"userRole \" +response.data.admin)\n            setIsAdmin(response.data.admin)\n            if(response.data.admin){\n                localStorage.setItem(\"role\", response.data.admin)\n            }\n            setLoading(false)\n        })\n    }\n\n    function getRole(){\n        console.log(\"Get role \" + isAdmin)\n        return isAdmin;\n    }\n\n    function getAuth(){\n        console.log(\"Get auth \" + loginSucces)\n        return loginSucces;\n    }\n\n    function changeRole(role, id){\n        let a = null\n        if(role){\n            a = false\n        } else {\n            a = true\n        }\n        Axios.put(\"http://localhost:5001/user/\"+id, {\n            admin: a\n        }).then((response)=>{\n            console.log(response)\n        })\n    }\n\n    function deleteUser(id){\n        Axios.delete(\"http://localhost:5001/user/\"+id).then((response)=>{\n            console.log(response)\n        })\n    }\n\n    function changeCamRole(id, role){\n        let a = null\n        if(role){\n            a = false\n        } else {\n            a = true\n        }\n        Axios.put(\"http://localhost:5001/camera/\"+id, {\n            itsOn: a\n        }).then((response)=>{\n            console.log(response)\n        })\n    }\n\n    return (\n        <UserContext.Provider value={{signup, logout, loging, getRole, getAuth, checkAuthentication, \n            loginSucces, isAdmin, loading, loading2,\n            changeRole, deleteUser, changeCamRole, loginCheck}}>\n            {children}\n        </UserContext.Provider>\n    )\n\n}\n\n","/home/pawel/projekty/projekt/client/src/components/OnlyUserRoute.js",[],"/home/pawel/projekty/projekt/client/src/components/OnlyAdminRoute.js",[],"/home/pawel/projekty/projekt/client/src/pages/Administration.js",["116","117","118","119","120","121","122"],"import React, {useEffect, useState, useRef} from 'react'\nimport Axios from 'axios'\nimport {Row, Col, Button, Form, Container } from \"react-bootstrap\"\nimport {useUser} from \"../context/UserContext\"\nimport {useStateWithCallbackLazy} from 'use-state-with-callback'\nimport NewCamera, {newCamera} from '../components/newCamera'\nimport {Link, useHistory } from 'react-router-dom'\n\nconst Administration = () => {\n    const [users, setUsers] = useState(false);\n    const [cameras, setCameras] = useState(false);\n    const [rooms, setRooms] = useState(false);\n    const [bookings, setBookings] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [userData, setUserData] = useState([]);\n    const [cameraData, setCameraData] = useState([]);\n    const [roomData, setRoomData] = useState([]);\n    const [bookingData, setBookingData] = useState([]);\n    const [assignR, setAssignR] = useStateWithCallbackLazy()\n    const [assignCam, setAssignCam] = useStateWithCallbackLazy()\n    const [conv, setConv] = useState(false) \n    const history = useHistory()\n\n    /*******************HANDLE USERS*******/\n    function handleFirst(e){\n        e.preventDefault()\n        setCameras(false);\n        setRooms(false);\n        setBookings(false);\n        setUsers(true);\n    }\n\n    function removeUser(id){\n        let temp = userData.filter((item)=>item.id_users !== id)\n        console.log(\"deleted\")\n        console.log(temp)\n        setUserData(temp)\n    }\n\n    function updateUserRole(id, rol){\n        let indx = userData.findIndex((item)=>item.id_users === id)\n        let items = [...userData]\n        let temp = {...items[indx]}\n        temp.admin = rol\n        items[indx]=temp\n        setUserData(items)\n    }\n\n     /*******************HANDLE CAMERAS*******/\n    function handleSecond(e){\n        e.preventDefault()\n        setUsers(false);\n        setRooms(false);\n        setBookings(false);\n        setCameras(true);\n    }\n\n    async function getCamId(id){\n        setAssignCam(id, ()=>{\n            checkAssign1(id)\n        })  \n    }\n\n    function changeCam(id){\n        console.log(\"change\")\n        let indx = cameraData.findIndex((item)=>item.id_cameras === id)\n        let items = [...cameraData]\n        let temp = {...items[indx]}\n        temp.itsOn = !temp.itsOn\n        items[indx]=temp\n        setCameraData(items)\n    }\n\n    function removeCamera(id){\n        let temp = cameraData.filter((item)=>item.id_cameras !== id)\n        console.log(\"deleted\")\n        console.log(temp)\n        setCameraData(temp)\n    }\n\n    function addCamera(a, b){\n        Axios.post(\"http://localhost:5001/camera\",{\n            id_cameras: null, \n            id: a, \n            name: b, \n            itsOn: 0\n        }).then((response)=>{\n            console.log(response)\n        })\n    }\n\n    /*******************HANDLE ROOMS*******/\n    function handleThird(e){\n        e.preventDefault()\n        setUsers(false);\n        setCameras(false);\n        setBookings(false);\n        setRooms(true);\n    }\n\n    function getRoomId(id){\n        setAssignR(id, ()=>{\n            checkAssign2(id)\n        })     \n    }\n\n    function removeRoom(id){\n        let temp = roomData.filter((item)=>item.id_rooms !== id)\n        console.log(\"deleted\")\n        console.log(temp)\n        setRoomData(temp)\n    }\n\n    function addRoom(t, s){\n        Axios.post(\"http://localhost:5001/room\",{\n            id_rooms: null, \n            type: t, \n            idSize: s, \n            idCamera: null\n        }).then((response)=>{\n            console.log(response)\n        })\n    }\n\n    function camToRoom(idCam, idRoom){\n        Axios.post(\"http://localhost:5001/room/assign\",{\n            id_r: idRoom,\n            id_c: idCam\n        }).then((response)=>{\n            console.log(response)\n            setAssignCam();\n            setAssignR();\n        })\n    }\n\n    function checkAssign1(param){\n        if(assignR){\n            camToRoom(param, assignR)\n        } \n    }\n\n    function checkAssign2(param){\n        if(assignCam){\n            camToRoom(assignCam, param)\n        } \n    }\n\n    /*****************HANDLE BOOKINGS**** */\n\n    function handleFourth(){\n        setUsers(false);\n        setCameras(false);\n        setRooms(false);\n        setBookings(true);\n    }\n\n    function removeBooking(id){\n        let temp = bookingData.filter((item)=>item.id_bookings !== id)\n        console.log(\"deleted\")\n        console.log(temp)\n        setBookingData(temp)\n\n    }\n\n\n    function handleFifth(){\n        history.push(\"/monitoring\")\n    }\n    \n    /***********FETCHING DATA */\n    async function fetchData() {\n        await fetch();\n    }\n\n    function fetch(){\n        setLoading(true);\n        Axios.get(\"http://localhost:5001/user\").then((response)=>{\n            console.log(response.data)\n            setUserData(response.data)\n        })\n        Axios.get(\"http://localhost:5001/room\").then((response)=>{\n            console.log(response.data)\n            setRoomData(response.data)\n        })\n        Axios.get(\"http://localhost:5001/camera\").then((response)=>{\n            console.log(response.data)\n            setCameraData(response.data)\n        })\n        Axios.get(\"http://localhost:5001/booking\").then((response)=>{\n            console.log(response.data)\n            //setBookingData(response.data)\n            //convertDate(response.data[0].firstDay)\n            fixDates(response.data)\n        })\n        setLoading(false)\n    }\n\n    const convertDate = str => {\n        str = str.toString();\n        let parts = str.split(\"T\");\n        return parts[0]\n    };\n\n    const fixDates=(param)=>{\n            let items = [...param]\n            for(var i=0; i<items.length; i++){\n                items[i].firstDay=convertDate(items[i].firstDay)\n                items[i].lastDay=convertDate(items[i].lastDay)\n            }          \n            setBookingData(items)\n    }\n\n    useEffect(()=>{\n        fetchData()\n    },[])\n\n    \n    if(loading){\n        return <div>LOADING...</div>\n    }\n    return (\n        <>\n        <Container className=\"d-flex align-items-center justify-content-center\"\n        style={{minHeight: \"10vh\" }}>\n            <div style={{maxWidth: \"600px\"}}>\n                <div className=\"divcenter\">\n                    <p>Panel Administarcyjny</p>\n                </div>\n                <Row>\n                    <Col sm=\"12\">\n                        <div className=\"ml-4 alert alert-info \" role=\"alert\" >\n                            <Row>\n                                <Col sm=\"9\">\n                                    <h6 className=\"ml-3 mt-2\">Włączenie oraz zarządzanie systemem monitoringu </h6>\n                                </Col>\n                                <Col sm=\"3\">\n                                    <Button style={{width: \"120px\"}} onClick={handleFifth}>Monitoring</Button>\n                                </Col>\n                            </Row>\n                        </div>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col sm=\"3\">\n                        <Button variant=\"secondary\" style={{width: \"150px\"}} onClick={handleFirst}>Użytkownicy</Button>\n                    </Col>\n                    <Col sm=\"3\">\n                        <Button variant=\"secondary\" style={{width: \"150px\"}} onClick={handleSecond}>Kamery</Button>\n                    </Col>\n                    <Col sm=\"3\">\n                        <Button variant=\"secondary\" style={{width: \"150px\"}} onClick={handleThird}>Pokoje</Button>\n                    </Col>\n                    <Col sm=\"3\">\n                        <Button variant=\"secondary\" style={{width: \"150px\"}} onClick={handleFourth}>Rezerwacje</Button>\n                    </Col>\n                </Row>\n\n                <div>\n                    {rooms?<AddRoom func={addRoom}/>:null}\n                    {cameras?<NewCamera func={addCamera}/>:null}\n                </div>\n                <div>\n                    {\n                        users?userData.map((item, index)=>{\n                            return <Users key={index} data={item} func={removeUser} func2={updateUserRole}/>\n                        }):(\n                        cameras?cameraData.map((item, index)=>{\n                            return <Cameras key={index} data={item} func={removeCamera} funcc2={getCamId} func3={changeCam}/>\n                        }):(\n                        rooms?roomData.map((item, index)=>{\n                            return <Rooms key={index} data={item} func={removeRoom} func2={getRoomId}/>\n                        }):(bookings?bookingData.map((item, index)=>{\n                            return <Bookings key={index} data={item} user={userData} func={removeBooking}/>\n                        }):null)\n                        ))\n                    }\n                </div>\n\n            </div>\n        </Container>\n\n        </>\n    )\n}\nconst AddRoom = (props) => {\n    const typeRef = useRef()\n    const sizeRef = useRef()\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.func(typeRef.current.value, sizeRef.current.value)\n    }\n\n    return (\n        <Row className='mt-3 align-items-center justify-content-center'>\n            <Form onSubmit={handleSubmit}>\n                <Form.Row>\n                <Col sm={6}>\n                    <Form.Control size=\"sm\" type=\"text\" ref={typeRef} required placeholder=\"Podaj typ\"/>\n                </Col>\n                <Col sm={4}>\n                    <Form.Control size=\"sm\" type=\"number\" ref={sizeRef} required placeholder=\"Podaj rozmiar\"/>\n                </Col>\n                <Col sm={2}><Button size=\"sm\" type=\"submit\">Dodaj</Button></Col>\n                </Form.Row> \n            </Form>\n        </Row>\n    )\n}\n\nconst Users = (props) => {\n    const {changeRole, deleteUser} = useUser();\n    const [error, setError] = useState();\n\n    const rights = (role, id) => e => {\n        e.preventDefault()\n        setError(false)\n        let a = null\n        try {\n            changeRole(role, id)\n            if(role){a = 0} else {a = 1}\n            props.func2(id, a)\n        } catch (error) {\n            console.log(error)\n        }\n        setError(true)\n    }\n\n    const deleteAcc = param => e => {\n        e.preventDefault()\n        try {\n            deleteUser(param)\n            props.func(param)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <Row className='mt-3'>\n            <Col sm={1}>{props.data.id_users} </Col>\n            <Col sm={4}>{props.data.login} </Col>\n            <Col sm={3}>{props.data.admin?\"Admin\":\"User\"}</Col>\n            <Col sm={2}>\n                <Button variant=\"outline-warning\" size=\"sm\"\n                 onClick={rights(props.data.admin, props.data.id_users)}>Rola</Button>\n            </Col>\n            <Col sm={2}>\n                <Button variant=\"outline-danger\" size=\"sm\" onClick={deleteAcc(props.data.id_users)}>Usuń</Button>\n            </Col>\n        </Row>\n    );\n}\n\nconst Cameras = (props) => {\n    const {changeCamRole} = useUser()\n    const [error, setError] = useState(false)\n\n\n    const deleteCam = param => e => {\n        e.preventDefault()\n        try {\n            Axios.delete(\"http://localhost:5001/camera/\"+param).then((response)=>{\n                console.log(response)\n                props.func(param)\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const assign = params => e => {\n        e.preventDefault()\n        props.funcc2(params)\n    }\n\n\n    const change = (params, on) => e => {\n        e.preventDefault()\n        setError(false)\n        let a = null\n        try {\n            changeCamRole(params, on)\n            if(on){a = 0} else {a = 1}\n            props.func3(params, a)\n        } catch (error) {\n            console.log(error)\n        }\n        setError(true)\n    }\n\n    return <div>\n        <Row className='mt-3'>\n            <Col sm={1}>{props.data.id_cameras}</Col>\n            <Col sm={4}>{props.data.name}</Col>\n            <Col sm={1}>{props.data.itsOn?\"On\":\"Off\"}</Col>\n            <Col sm={2}>\n                <Button variant=\"outline-warning\" size=\"sm\" \n                onClick={assign(props.data.id_cameras)}>Powiąż</Button>\n            </Col>\n            <Col sm={2}>\n                <Button variant=\"outline-warning\" size=\"sm\" \n                onClick={change(props.data.id_cameras, props.data.itsOn)}>Wł/Wył</Button>\n            </Col>\n            <Col sm={2}>\n                <Button variant=\"outline-danger\" size=\"sm\" \n                onClick={deleteCam(props.data.id_cameras)}>Usuń</Button>\n            </Col>\n        </Row>\n    </div>\n}\n\n\n\nconst Rooms = (props) => {\n\n    const deleteRoom = param => e => {\n        e.preventDefault()\n        try {\n            Axios.delete(\"http://localhost:5001/room/\"+param).then((response)=>{\n                console.log(response)\n                props.func(param)\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const assign = param => e => {\n        e.preventDefault()\n        props.func2(param)\n    }\n    return <div>\n        <Row className='mt-3'>\n            <Col sm={1}>{props.data.id_rooms}</Col>\n            <Col sm={3}>{props.data.type}</Col>\n            <Col sm={1}></Col>\n            <Col sm={3}>{props.data.idSize} miejsc</Col>\n            <Col sm={2}>\n                <Button variant=\"outline-warning\" size=\"sm\" \n                onClick={assign(props.data.id_rooms)}>Powiąż</Button>\n            </Col>\n            <Col sm={2}>\n                <Button variant=\"outline-danger\" size=\"sm\" \n                onClick={deleteRoom(props.data.id_rooms)}>Usuń</Button>\n            </Col>\n        </Row>\n    </div>\n}\n\n\nconst Bookings = (props) => {\n    \n    const deleteBooking = param => e => {\n        e.preventDefault()\n        try {\n            Axios.delete(\"http://localhost:5001/booking/\"+param).then((response)=>{\n                console.log(response)\n                props.func(param)\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    \n    const assign = param => e => {\n        e.preventDefault()\n        console.log(\"aa\"+param)\n    }\n    \n    return <div>\n        <Row className='mt-3'>\n            <Col sm={1}>{props.data.id_bookings}</Col>\n            <Col sm={3}>{props.data.firstDay}</Col>\n            <Col sm={3}>{props.data.lastDay}</Col>\n            <Col sm={1}></Col>\n            <Col sm={2}>\n                <Button variant=\"outline-dark\" size=\"sm\" \n                onClick={assign(props.data.id_bookings)}>More</Button>\n            </Col>\n            <Col sm={2}>\n                <Button variant=\"outline-danger\" size=\"sm\" \n                onClick={deleteBooking(props.data.id_bookings)}>Usuń</Button>\n            </Col>\n        </Row>\n    </div>\n}\n\nexport default Administration\n","/home/pawel/projekty/projekt/client/src/pages/UserPanel.js",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143"],"import React, {useState, useEffect, useRef} from 'react'\nimport Axios from 'axios'\nimport Camera from './Test2'\nimport {Container, Form, Row, Col, Button, Table} from 'react-bootstrap'\n\nconst UserPanel = () => {\n    const bookRef=useRef()\n    const [disabledB, setDisabledB] = useState(false)\n    const userId = localStorage.getItem(\"userId\")\n    const [turnOn, setTurnOn] = useState(false)\n    const [show, setShow] = useState(false)\n    const [show2, setShow2] = useState(false)\n    const [allBookings, setAllBookings] = useState([])\n    const [currentDate, setCurrentDate]= useState();\n    const [currentCamera, setCurrentCamera]=useState();\n    const [currentBooking, setCurrentBooking]=useState([]); \n    const [notCurrentBooking, setNotCurrentBooking]=useState([]);\n\n\n    function getCamId(id){\n        setTurnOn(false)\n        Axios.get(\"http://localhost:5001/camera/\"+id).then((response)=>{\n            setCurrentCamera(response.data.id)\n            setTurnOn(true)\n        })\n\n    }\n\n    function removeBooking(id){\n        let temp = notCurrentBooking.filter((item)=>item.id_bookings !== id)\n        console.log(\"deleted\")\n        console.log(temp)\n        setNotCurrentBooking(temp)\n    }\n\n    const onlyCurrentBookings = () => {\n        let temp = allBookings.filter((item)=>(item.firstDay+1 <= currentDate && item.lastDay+1>=currentDate))\n        console.log(temp)\n        setCurrentBooking(temp)\n        setShow2(false)\n        setShow(true)\n        setDisabledB(true)\n    }\n\n    const notCurrentBookings = () => {\n        let temp = allBookings.filter((item)=>!(item.firstDay+1 <= currentDate && item.lastDay+1>=currentDate))\n        console.log(temp)\n        setNotCurrentBooking(temp)\n        setShow(false)\n        setShow2(true)\n    }\n\n\n    const convertDate = str => {\n        str = str.toString();\n        let parts = str.split(\"T\");\n        return parts[0]\n    };\n\n    const fixDates=(param)=>{\n            let items = [...param]\n            for(var i=0; i<items.length; i++){\n                items[i].firstDay=convertDate(items[i].firstDay)\n                items[i].lastDay=convertDate(items[i].lastDay)\n            }          \n            setAllBookings(items)\n    }\n\n    async function fetchData() {\n        await fetch();\n    }\n\n    function fetch(){\n        Axios.get(\"http://localhost:5001/booking/user/\"+userId).then((response)=>{\n            console.log(response.data)\n            fixDates(response.data)\n        })\n        Axios.get(\"http://localhost:5001/booking/date\").then((response)=>{\n            console.log(response.data)\n            setCurrentDate(response.data)\n        })\n        \n    }\n\n    useEffect(()=>{\n        fetchData();\n    },[])\n\n    return (\n        <>\n        <Container className=\"d-flex align-items-center justify-content-center\"\n        style={{minHeight: \"10vh\" }}>\n            <div style={{width: \"700px\"}}>\n                <div className=\"divcenter\">\n                    <p>Panel użytkownika</p>\n                </div>\n                <Row className=\"divcenter2\">\n                    <Col sm=\"6\">\n                        <Button onClick={onlyCurrentBookings}>Wyświetl monitoring</Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button onClick={notCurrentBookings}>Moje Rezerwacje</Button>\n                    </Col>\n                </Row>\n                <div>\n                <Table striped bordered hover>  \n                    <thead> \n                        {show?(<tr>\n                            <th>ID</th>\n                            <th>Imię</th>\n                            <th>Opis</th>\n                            <th>Kamera</th>\n                        </tr>):null}\n                        \n                        {show2?(<tr>\n                            <th>ID</th>\n                            <th>Imię</th>\n                            <th>Początek</th>\n                            <th>Koniec</th>\n                            <th>Usuń</th>\n                        </tr>):null}\n                    </thead>\n                    <tbody>\n                    {show?currentBooking.map((item, index) => {\n                        const {id, firstD, lastD, idUser, idAnimal, idRoom} = item;\n                        return (\n                            <ListBookings data={item} func={getCamId} key={index}/>\n                        );\n                    }):null}\n\n                    {show2?notCurrentBooking.map((item, index) => {\n                        const {id, firstD, lastD, idUser, idAnimal, idRoom} = item;\n                        return (\n                            <ListNewBookings data={item} func={removeBooking} key={index}/>\n                        );\n                    }):null\n                    }\n\n\n                    </tbody>    \n                </Table>  \n                </div>\n\n                <div>\n                    {turnOn?<Cam data={currentCamera}/>:null}\n                </div>\n\n            </div>\n        </Container>\n\n        </>\n    )\n    \n}\n/*\n<Button onClick={onlyCurrentBookings}>Wyświetl monitoring</Button>\n\n                    {show?currentBooking.map((item, index) => {\n                        const {id, firstD, lastD, idUser, idAnimal, idRoom} = item;\n                        return (\n                            <ListBookings data={item} func={getCamId} key={index}/>\n                        );\n                    }):null\n                    }\n\n{turnOn?<Cam data={currentCamera}/>:null}\n*/\n//                    <button onClick={onlyCurrentBookings}></button>\nconst Cam = param =>{\n\n    return <div className=\"mt-3\"> \n        <Camera id={param.data}/>\n    </div>\n}\n\n\n\nconst ListBookings = (param) => {\n    const [animal, setAnimal] = useState();\n    const [camId, setCamId] = useState();\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        console.log(\"idrom\" + param.data.IdRoom)\n        Axios.get(\"http://localhost:5001/room/\"+param.data.IdRoom).then((response)=>{\n            setCamId(response.data.idCamera)\n            param.func(response.data.idCamera)\n        })\n\n    }\n    useEffect(() => {\n        Axios.get(\"http://localhost:5001/animals/\"+param.data.idAnimal).then((response)=>{\n            console.log(response)\n            setAnimal(response.data)\n\n        })\n\n    }, [])\n\n    return (\n        <tr>\n            <td>{param.data.id_bookings}</td>\n            <td>{animal && animal.name}</td>\n            <td>{animal && animal.description}</td>\n            <td><Button size=\"sm\" onClick={handleSubmit}>Kamera</Button></td>      \n        </tr>\n    )\n\n}\n\n/*\n        <Row className='mt-3'>\n            <Col sm={1}>{param.data.id_bookings}</Col>\n            <Col sm={3}>{animal && animal.name}</Col>\n            <Col sm={6}>{animal && animal.description}</Col>\n\n            <Col sm={2}>\n                <Button size=\"sm\" onClick={handleSubmit}>Kamera</Button>\n            </Col>\n        </Row>\n\n*/\n\nconst ListNewBookings = (param) => {\n    const [animal, setAnimal] = useState();\n    const [camId, setCamId] = useState();\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        Axios.delete(\"http://localhost:5001/booking/\"+param.data.id_bookings).then((response)=>{\n            param.func(param.data.id_bookings)\n        })\n\n    }\n    useEffect(() => {\n        Axios.get(\"http://localhost:5001/animals/\"+param.data.idAnimal).then((response)=>{\n            console.log(response)\n            setAnimal(response.data)\n\n        })\n\n    }, [])\n\n    return (\n        <tr>\n            <td>{param.data.id_bookings}</td>\n            <td>{animal && animal.name}</td>\n            <td>{param.data.firstDay}</td>\n            <td>{param.data.lastDay}</td>\n            <td><Button variant=\"outline-danger\" size=\"sm\" onClick={handleSubmit}>Usuń rezerwacje</Button></td>      \n        </tr>\n    )\n\n}\n/* \n        <Row className='mt-3'>\n            <Col sm={1}>{param.data.id_bookings}</Col>\n            <Col sm={2}>{animal && animal.name}</Col>\n            <Col sm={2}>{param.data.firstDay}</Col>\n            <Col sm={3}>{param.data.lastDay}</Col>\n            <Col sm={4}>\n                <Button variant=\"outline-danger\" size=\"sm\" onClick={handleSubmit}>Usuń rezerwacje</Button>\n            </Col>\n        </Row>\n\n*/\nexport default UserPanel","/home/pawel/projekty/projekt/client/src/components/newCamera.js",["144","145","146","147","148"],"import React, {useState, useEffect, useRef} from 'react'\nimport Axios from 'axios'\nimport {Form, Row, Col, Button, Container} from 'react-bootstrap'\n\n\nconst NewCamera = (props) => {\n    const camName = useRef()\n    const [cams, setCams] = useState([]);\n    const [newCams, setNewCams] = useState([]);\n    const [ready, setReady] = useState(false)\n\n    function removeCamera(id){\n        let temp = [...cams]\n        let reTemp = [...newCams]\n\n        for(var i=0; i<temp.length; i++){\n            reTemp = newCams.filter((item)=>item.camid === temp[i].id)\n        }\n        console.log(\"deleted\")\n        console.log(reTemp)\n        setNewCams(reTemp)\n        setReady(true);\n    }\n\n    function handleSubmit(e){\n        e.preventDefault();\n        console.log(camName.current.value)\n        let nam = camName.current.value\n        let temp = camName.filter((item)=>item.name === nam)\n\n        props.func(temp[0].id, temp[0].name)\n        console.log(temp[0].id+\" \"+temp[0].name)\n    }\n\n    function handleClick(e){\n        e.preventDefault();\n        console.log(\"s\")\n        console.log(newCams)\n        console.log(cams)\n    }\n\n\n    const addCamera = (camid, idd, name) => {\n        const cam = {id: idd, camid, name}\n        console.log(cam)\n        setNewCams((cameras)=>{\n            return [...cameras, cam]\n        }) \n    }\n\n    async function getCams(){\n        let i =0;\n        setNewCams([])\n        setReady(false)\n        await navigator.mediaDevices.enumerateDevices().then(function(devices) {\n            for(const device of devices) {\n                console.log(device.kind + \": \" + device.label + \" id = \" + device.deviceId);\n                if (device.kind === 'videoinput') {\n                    console.log(\"ID \"+device.deviceId+\" dLa \"+device.label+\" iter \"+i);\n                    addCamera(device.deviceId, i, device.label);\n                    i = i+1;\n                }\n        }})\n        .catch(function(err) {\n            console.log(err.name + \": \" + err.message);\n        });\n        removeCamera()\n    }\n\n\n    useEffect(() => {\n        Axios.get(\"http://localhost:5001/camera\").then((response) => {\n            console.log(response.data)\n            setCams(response.data)\n            getCams();\n        }) \n    }, [])\n\n    return (\n        <Row>\n            <Form inline onSubmit={handleSubmit} className=\"w-100 mt-3\" >\n            <Col sm={9}>\n                <Form.Group controlId=\"newCameras\">\n                    <Form.Control as=\"select\" ref={camName} required>\n                    {\n                        ready?newCams.map((item)=>{\n                            const {id, camid, name} = item;\n                            return(\n                                <option key={id}>{name}</option>\n                            )\n                        }):<option>Empty</option>\n                    }\n                    </Form.Control>\n                </Form.Group>\n            </Col>\n            <Col sm={3}>\n                <Button className=\"pull-right\" type=\"submit\">Dodaj</Button>\n            </Col>\n            </Form>\n            \n\n        </Row>\n    )\n}\n\nexport default NewCamera\n","/home/pawel/projekty/projekt/client/src/pages/Monitoring.js",["149","150","151","152","153"],"import React, {useState, useEffect, useRef} from 'react'\nimport Axios from 'axios'\nimport Test from './Test'\nimport {Row, Col, Container, Button, Form} from 'react-bootstrap'\nimport { FaTemperatureHigh } from 'react-icons/fa'\n\nconst Monitoring = () => {\n    const [cameras, setCameras] = useState([])\n    const [animals, setAnimals] = useState([])\n    const [show, setShow] = useState(false) \n    const [show2, setShow2] = useState(false)\n    const [currentDate, setCurrentDate] = useState();\n    const [allBookings, setAllBookings] = useState([])\n    const [currentBooking, setCurrentBooking]=useState([]); \n\n    function handleClick(){\n        setShow2(false)\n        setShow(true)\n    }\n    function handle2Click(){\n        onlyCurrentBookings(); \n    }\n\n    const onlyCurrentBookings = () => {\n        let temp = allBookings.filter((item)=>(item.firstDay+1 <= currentDate && item.lastDay+1>=currentDate))\n        console.log(temp)\n        fetchAnimals(temp)\n        setCurrentBooking(temp)\n    }\n\n    /*async function fetchAnimals(param){\n        await fetchAnim(param)\n        \n    }*/\n\n    function fetchAnimals(param){\n        setAnimals([])\n        console.log(param)\n        /*Axios.get(\"http://localhost:5001/animals/\"+param.data.idAnimal).then((response)=>{\n            console.log(response)\n        })*/\n        param.forEach(element => {\n            Axios.get(\"http://localhost:5001/animals/\"+element.idAnimal).then((response)=>{\n                setAnimals((animal)=>{\n                    console.log(response.data)\n                    return [...animal, response.data]\n                })\n            })\n        });\n        console.log(\"after\")\n        console.log(animals)\n        setShow2(true)\n    }\n\n\n\n    const convertDate = str => {\n        str = str.toString();\n        let parts = str.split(\"T\");\n        return parts[0]\n    };\n\n    const fixDates=(param)=>{\n            let items = [...param]\n            for(var i=0; i<items.length; i++){\n                items[i].firstDay=convertDate(items[i].firstDay)\n                items[i].lastDay=convertDate(items[i].lastDay)\n            }          \n            setAllBookings(items)\n    }\n\n    async function fetchData(){\n        await fetch();\n        setShow(true);\n    }\n\n    async function filterData(data){\n        let temp = await filter(data)\n        setCameras(temp)\n    }\n\n    function filter(data){\n        let temp = data.filter((item)=>item.itsOn !== 0)\n        return temp \n    }\n\n    function fetch(){\n        Axios.get(\"http://localhost:5001/camera\").then((response)=>{\n            console.log(response.data)\n            filterData(response.data)\n        })\n\n        Axios.get(\"http://localhost:5001/booking/date\").then((response)=>{\n            console.log(response.data)\n            setCurrentDate(response.data)\n        })\n\n        Axios.get(\"http://localhost:5001/booking\").then((response)=>{\n            console.log(response.data)\n            fixDates(response.data)\n        })\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n\n    return (\n        <>\n        <Container className=\"d-flex align-items-center justify-content-center\"\n        style={{minHeight: \"10vh\" }}>\n            <div style={{maxWidth: \"700px\"}}>                      \n            <Row>\n                \n                <Col sm={6}>   \n                    <Button onClick={handleClick}>Monitoring</Button>   \n                </Col>\n                <Col sm={6}><Button onClick={handle2Click}>Zwierzęta</Button></Col>\n                \n            </Row>\n\n            <Row>\n            {\n                show?cameras.map((item, index)=>{\n                    return (<Col><Camera data={item} key={index}/></Col>)\n                }):null\n            }\n            </Row>\n            \n            <div>\n            {\n                show2?animals.map((item, index)=>{\n                    return (<Animal data={item} key={index}/>)\n                }):null\n                    \n            }\n            </div>\n\n        </div>\n        </Container>\n        </>\n    )\n}\n\n\nconst Camera = param => {\n    return <div className=\"mt-3\"> \n        <Test id={param.data.id}/>\n    </div>\n}\n\nconst Animal = param => {\n    const [animal, setAnimal] = useState();\n    const typeRef = useRef()\n\n    function handleSubmit(e){\n        e.preventDefault()\n        Axios.put(\"http://localhost:5001/animals/\"+param.data.id_animals,{\n            name: null,\n            breed: null,\n            description: typeRef.current.value\n        }).then((response)=>{\n            console.log(response)\n        })\n    }\n\n    return (\n        <Row className='mt-3'>\n                <Col sm={1}>{param.data.id_animals}</Col>\n                <Col sm={3}>{param.data.name}</Col>\n                <Col sm={6}>\n                    <Form.Control size=\"sm\" type=\"text\" ref={typeRef} required placeholder=\"Opis\"/>\n                </Col>\n                <Col sm={2}>\n                    <Button size=\"sm\" onClick={handleSubmit}>Dodaj</Button>\n                </Col>\n        </Row>\n    )\n}\n\nexport default Monitoring\n\n\n\n\n    /*return <>\n     <Container>\n        <Row className=\"mt-3\">\n            <Col md={8}>\n                <Test id={param.data.id}/>\n            </Col>\n            <Col md={4}>\n                <Form>\n                    <Row>\n                        <Form.Group controlId=\"animalInfo\">\n                            <Form.Label>Wpis o statusie zwierzęcia</Form.Label>\n                            <Form.Control as=\"textarea\" rows={9} />\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Button size=\"sm\" type=\"submit\">Dodaj</Button>\n                    </Row>\n                </Form>\n            </Col>\n        </Row>\n    </Container>\n        </>\n        */",{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":16,"column":8,"nodeType":"160","messageId":"161","endLine":16,"endColumn":12},{"ruleId":"158","severity":1,"message":"162","line":17,"column":8,"nodeType":"160","messageId":"161","endLine":17,"endColumn":13},{"ruleId":"158","severity":1,"message":"163","line":21,"column":8,"nodeType":"160","messageId":"161","endLine":21,"endColumn":18},{"ruleId":"158","severity":1,"message":"164","line":26,"column":8,"nodeType":"160","messageId":"161","endLine":26,"endColumn":11},{"ruleId":"158","severity":1,"message":"165","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"166","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":33},{"ruleId":"158","severity":1,"message":"167","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":17},{"ruleId":"158","severity":1,"message":"168","line":4,"column":9,"nodeType":"160","messageId":"161","endLine":4,"endColumn":19},{"ruleId":"158","severity":1,"message":"169","line":180,"column":48,"nodeType":"160","messageId":"161","endLine":180,"endColumn":50},{"ruleId":"158","severity":1,"message":"170","line":180,"column":62,"nodeType":"160","messageId":"161","endLine":180,"endColumn":66},{"ruleId":"158","severity":1,"message":"171","line":180,"column":68,"nodeType":"160","messageId":"161","endLine":180,"endColumn":74},{"ruleId":"158","severity":1,"message":"172","line":180,"column":76,"nodeType":"160","messageId":"161","endLine":180,"endColumn":84},{"ruleId":"158","severity":1,"message":"173","line":9,"column":12,"nodeType":"160","messageId":"161","endLine":9,"endColumn":19},{"ruleId":"174","severity":1,"message":"175","line":44,"column":7,"nodeType":"176","endLine":44,"endColumn":9,"suggestions":"177"},{"ruleId":"154","replacedBy":"178"},{"ruleId":"156","replacedBy":"179"},{"ruleId":"158","severity":1,"message":"180","line":7,"column":7,"nodeType":"160","messageId":"161","endLine":7,"endColumn":12},{"ruleId":"158","severity":1,"message":"181","line":12,"column":12,"nodeType":"160","messageId":"161","endLine":12,"endColumn":18},{"ruleId":"158","severity":1,"message":"182","line":15,"column":12,"nodeType":"160","messageId":"161","endLine":15,"endColumn":17},{"ruleId":"174","severity":1,"message":"183","line":64,"column":8,"nodeType":"176","endLine":64,"endColumn":10,"suggestions":"184"},{"ruleId":"174","severity":1,"message":"185","line":12,"column":8,"nodeType":"176","endLine":12,"endColumn":10,"suggestions":"186"},{"ruleId":"158","severity":1,"message":"187","line":23,"column":20,"nodeType":"160","messageId":"161","endLine":23,"endColumn":29},{"ruleId":"174","severity":1,"message":"188","line":53,"column":8,"nodeType":"176","endLine":53,"endColumn":10,"suggestions":"189"},{"ruleId":"158","severity":1,"message":"190","line":5,"column":7,"nodeType":"160","messageId":"161","endLine":5,"endColumn":24},{"ruleId":"158","severity":1,"message":"191","line":6,"column":20,"nodeType":"160","messageId":"161","endLine":6,"endColumn":29},{"ruleId":"158","severity":1,"message":"192","line":7,"column":9,"nodeType":"160","messageId":"161","endLine":7,"endColumn":13},{"ruleId":"158","severity":1,"message":"193","line":21,"column":12,"nodeType":"160","messageId":"161","endLine":21,"endColumn":16},{"ruleId":"158","severity":1,"message":"194","line":21,"column":18,"nodeType":"160","messageId":"161","endLine":21,"endColumn":25},{"ruleId":"174","severity":1,"message":"195","line":215,"column":7,"nodeType":"176","endLine":215,"endColumn":9,"suggestions":"196"},{"ruleId":"158","severity":1,"message":"197","line":315,"column":12,"nodeType":"160","messageId":"161","endLine":315,"endColumn":17},{"ruleId":"158","severity":1,"message":"197","line":359,"column":12,"nodeType":"160","messageId":"161","endLine":359,"endColumn":17},{"ruleId":"158","severity":1,"message":"198","line":4,"column":20,"nodeType":"160","messageId":"161","endLine":4,"endColumn":24},{"ruleId":"158","severity":1,"message":"199","line":7,"column":11,"nodeType":"160","messageId":"161","endLine":7,"endColumn":18},{"ruleId":"158","severity":1,"message":"200","line":8,"column":12,"nodeType":"160","messageId":"161","endLine":8,"endColumn":21},{"ruleId":"174","severity":1,"message":"195","line":87,"column":7,"nodeType":"176","endLine":87,"endColumn":9,"suggestions":"201"},{"ruleId":"158","severity":1,"message":"169","line":125,"column":32,"nodeType":"160","messageId":"161","endLine":125,"endColumn":34},{"ruleId":"158","severity":1,"message":"202","line":125,"column":36,"nodeType":"160","messageId":"161","endLine":125,"endColumn":42},{"ruleId":"158","severity":1,"message":"203","line":125,"column":44,"nodeType":"160","messageId":"161","endLine":125,"endColumn":49},{"ruleId":"158","severity":1,"message":"204","line":125,"column":51,"nodeType":"160","messageId":"161","endLine":125,"endColumn":57},{"ruleId":"158","severity":1,"message":"205","line":125,"column":59,"nodeType":"160","messageId":"161","endLine":125,"endColumn":67},{"ruleId":"158","severity":1,"message":"206","line":125,"column":69,"nodeType":"160","messageId":"161","endLine":125,"endColumn":75},{"ruleId":"158","severity":1,"message":"169","line":132,"column":32,"nodeType":"160","messageId":"161","endLine":132,"endColumn":34},{"ruleId":"158","severity":1,"message":"202","line":132,"column":36,"nodeType":"160","messageId":"161","endLine":132,"endColumn":42},{"ruleId":"158","severity":1,"message":"203","line":132,"column":44,"nodeType":"160","messageId":"161","endLine":132,"endColumn":49},{"ruleId":"158","severity":1,"message":"204","line":132,"column":51,"nodeType":"160","messageId":"161","endLine":132,"endColumn":57},{"ruleId":"158","severity":1,"message":"205","line":132,"column":59,"nodeType":"160","messageId":"161","endLine":132,"endColumn":67},{"ruleId":"158","severity":1,"message":"206","line":132,"column":69,"nodeType":"160","messageId":"161","endLine":132,"endColumn":75},{"ruleId":"158","severity":1,"message":"207","line":180,"column":12,"nodeType":"160","messageId":"161","endLine":180,"endColumn":17},{"ruleId":"174","severity":1,"message":"208","line":198,"column":8,"nodeType":"176","endLine":198,"endColumn":10,"suggestions":"209"},{"ruleId":"158","severity":1,"message":"207","line":226,"column":12,"nodeType":"160","messageId":"161","endLine":226,"endColumn":17},{"ruleId":"158","severity":1,"message":"210","line":226,"column":19,"nodeType":"160","messageId":"161","endLine":226,"endColumn":27},{"ruleId":"174","severity":1,"message":"208","line":242,"column":8,"nodeType":"176","endLine":242,"endColumn":10,"suggestions":"211"},{"ruleId":"158","severity":1,"message":"212","line":3,"column":33,"nodeType":"160","messageId":"161","endLine":3,"endColumn":42},{"ruleId":"213","severity":1,"message":"214","line":17,"column":37,"nodeType":"215","messageId":"216","endLine":17,"endColumn":70},{"ruleId":"158","severity":1,"message":"217","line":35,"column":14,"nodeType":"160","messageId":"161","endLine":35,"endColumn":25},{"ruleId":"174","severity":1,"message":"218","line":77,"column":8,"nodeType":"176","endLine":77,"endColumn":10,"suggestions":"219"},{"ruleId":"158","severity":1,"message":"220","line":87,"column":40,"nodeType":"160","messageId":"161","endLine":87,"endColumn":45},{"ruleId":"158","severity":1,"message":"221","line":5,"column":10,"nodeType":"160","messageId":"161","endLine":5,"endColumn":27},{"ruleId":"158","severity":1,"message":"222","line":14,"column":12,"nodeType":"160","messageId":"161","endLine":14,"endColumn":26},{"ruleId":"174","severity":1,"message":"195","line":106,"column":8,"nodeType":"176","endLine":106,"endColumn":10,"suggestions":"223"},{"ruleId":"158","severity":1,"message":"224","line":154,"column":12,"nodeType":"160","messageId":"161","endLine":154,"endColumn":18},{"ruleId":"158","severity":1,"message":"225","line":154,"column":20,"nodeType":"160","messageId":"161","endLine":154,"endColumn":29},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'Test' is defined but never used.","Identifier","unusedVar","'Test2' is defined but never used.","'CreateRoom' is defined but never used.","'Cam' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'useUser' is defined but never used.","'useHistory' is defined but never used.","'id' is assigned a value but never used.","'type' is assigned a value but never used.","'idSize' is assigned a value but never used.","'idCamera' is assigned a value but never used.","'isError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkAuthentication' and 'role'. Either include them or remove the dependency array.","ArrayExpression",["228"],["226"],["227"],"'sleep' is assigned a value but never used.","'yourID' is assigned a value but never used.","'peers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["229"],"React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.",["230"],"'setStream' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'peers', 'roomID', and 'stream'. Either include them or remove the dependency array.",["231"],"'UserUpdateContext' is assigned a value but never used.","'newCamera' is defined but never used.","'Link' is defined but never used.","'conv' is assigned a value but never used.","'setConv' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["232"],"'error' is assigned a value but never used.","'Form' is defined but never used.","'bookRef' is assigned a value but never used.","'disabledB' is assigned a value but never used.",["233"],"'firstD' is assigned a value but never used.","'lastD' is assigned a value but never used.","'idUser' is assigned a value but never used.","'idAnimal' is assigned a value but never used.","'idRoom' is assigned a value but never used.","'camId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'param.data.idAnimal'. Either include it or remove the dependency array.",["234"],"'setCamId' is assigned a value but never used.",["235"],"'Container' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","'handleClick' is defined but never used.","React Hook useEffect has a missing dependency: 'getCams'. Either include it or remove the dependency array.",["236"],"'camid' is assigned a value but never used.","'FaTemperatureHigh' is defined but never used.","'currentBooking' is assigned a value but never used.",["237"],"'animal' is assigned a value but never used.","'setAnimal' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"246","fix":"248"},{"desc":"249","fix":"250"},{"desc":"249","fix":"251"},{"desc":"252","fix":"253"},{"desc":"246","fix":"254"},"Update the dependencies array to be: [checkAuthentication, role]",{"range":"255","text":"256"},"Update the dependencies array to be: [roomID]",{"range":"257","text":"258"},"Update the dependencies array to be: [props.peer]",{"range":"259","text":"260"},"Update the dependencies array to be: [peers, roomID, stream]",{"range":"261","text":"262"},"Update the dependencies array to be: [fetchData]",{"range":"263","text":"264"},{"range":"265","text":"264"},"Update the dependencies array to be: [param.data.idAnimal]",{"range":"266","text":"267"},{"range":"268","text":"267"},"Update the dependencies array to be: [getCams]",{"range":"269","text":"270"},{"range":"271","text":"264"},[1133,1135],"[checkAuthentication, role]",[2025,2027],"[roomID]",[311,313],"[props.peer]",[1472,1474],"[peers, roomID, stream]",[5918,5920],"[fetchData]",[2676,2678],[6257,6259],"[param.data.idAnimal]",[7431,7433],[2249,2251],"[getCams]",[3020,3022]]